<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="MemberDAO">
 	<resultMap type="Member" id="MemberResult">
 		<id property="member_code" column="MEMBER_CODE"/>
 		<result property="member_code" column="MEMBER_CODE"/>
 		<result property="member_id" column="MEMBER_ID"/>
 		<result property="member_pw" column="MEMBER_PW"/>
 		<result property="member_name" column="MEMBER_NAME"/>
 		<result property="member_contact" column="MEMBER_CONTACT"/>
 		<result property="member_email" column="MEMBER_EMAIL"/>
 		<result property="member_road_address" column="MEMBER_ROAD_ADDRESS"/>
 		<result property="member_jibun_address" column="MEMBER_JIBUN_ADDRESS"/>
 		<result property="member_detail_address" column="MEMBER_DETAIL_ADDRESS"/>
 		<result property="enabled" column="ENABLED"/>
 		<result property="member_writetime" column="MEMBER_WRITETIME"/> <!-- 와 여기 MEMBER_WRITETIME 뒤에 공백이 있어서 mapping 시 null이 나왔다.. 소름.. -->
 		<result property="member_updatetime" column="MEMBER_UPDATETIME"/>
 		<!-- Many to one 단방향 참조 -->
 		<collection property="authList" resultMap="AuthResult">
 		</collection>
 	</resultMap>
 	
 	<resultMap type="MemberAuth" id="AuthResult">
 		<id property="member_auth_code" column = "MEMBER_AUTH_CODE" />
 		<result property="member_auth_code" column = "MEMBER_AUTH_CODE" />
 		<result property="member_code" column="MEMBER_CODE"/>
 		<result property="member_auth" column="MEMBER_AUTH"/>
 		<result property="member_auth_writetime" column="MEMBER_AUTH_WRITETIME"/>
 		<result property="member_auth_updatetime" column="MEMBER_AUTH_UPDATETIME"/>
 	</resultMap>
 	
 
 	
 	<!-- 회원 CRUD -->
 	
 	<insert id="insertMember" useGeneratedKeys="false">
		 	INSERT INTO cafehi_member(member_code, member_id, member_pw, member_name, member_contact, member_email, member_road_address, member_jibun_address, member_detail_address, member_writetime, member_updatetime)
		 	VALUES(seq_member.nextval, #{member_id}, #{member_pw}, #{member_name}, #{member_contact}, #{member_email}, #{member_road_address},#{member_jibun_address},#{member_detail_address}, #{member_writetime}, #{member_updatetime})
 			
 			<selectKey keyProperty="member_code" resultType="int" order="AFTER">
			SELECT seq_member.currval FROM DUAL
			</selectKey>
 	</insert>
 	
 	<insert id="insertMemberAuth" useGeneratedKeys="false">
		 INSERT INTO cafehi_member_auth(member_auth_code, member_code, member_auth, member_auth_writetime, member_auth_updatetime) 
		 VALUES(seq_member_auth.nextval , #{member_code}, #{member_auth}, #{member_auth_writetime}, #{member_auth_updatetime})
	</insert>


 	<update id="updateMemberName" parameterType="Member">
 		UPDATE cafehi_member
 		SET member_name = #{member_name}
 		WHERE member_code = #{member_code}
 	</update>
 	
 	<update id="updateMemberContact" parameterType="Member">
 		UPDATE cafehi_member
 		SET member_contact = #{member_contact}
 		WHERE member_code = #{member_code}
 	</update>
 	
 	<update id="updateMemberEmail" parameterType="Member">
 		UPDATE cafehi_member
 		SET member_email = #{member_email}
 		WHERE member_code = #{member_code}
 	</update>
 	
 	<update id="updateMemberAddress" parameterType="Member">
 		UPDATE cafehi_member
 		SET member_road_address = #{member_road_address}, member_jibun_address = #{member_jibun_address}
 		WHERE member_code = #{member_code}
 	</update>
 	
 	<update id="updateMemberDetailAddress" parameterType="Member">
 		UPDATE cafehi_member
 		SET member_detail_address = #{member_detail_address}
 		WHERE member_code = #{member_code}
 	</update>
 	
 	<delete id="deleteMember" parameterType="int">
 		DELETE FROM cafehi_member_auth WHERE member_auth_code = #{member_auth_code}
 	</delete>
 
 	
 	<select id="findMemberById" parameterType="String" resultMap="MemberResult">
 		SELECT * 
 		FROM cafehi_member m LEFT OUTER JOIN cafehi_member_auth cma ON m.member_code = cma.member_code  
 		WHERE member_id = #{member_id}
 	</select>
 	
 	
 	<!-- cri 객체와 member_auth를 동시에 파라미터로 넘겨주기 위해 hashMap을 사용했다. -->
 	<select id="getMemberList" parameterType="hashMap" resultMap="MemberResult">
 		
 		
 		SELECT * 
 		FROM(
 		SELECT
 			rownum rn, mem.member_code, member_pw, member_name, member_contact, member_email, member_road_address, member_jibun_address, member_detail_address, enabled, member_auth
 		FROM
 			(SELECT * FROM cafehi_member ORDER BY member_code DESC) mem 
 		LEFT OUTER JOIN cafehi_member_auth auth on mem.member_code = 
 			auth.member_code
 		WHERE
 			auth.member_auth = #{member_auth}
 		)
 		 <![CDATA[
	 			WHERE rn > (#{cri.pageNum} -1) * #{cri.amount} AND rn <= #{cri.pageNum} * #{cri.amount}
	 		]]>
 	</select>
 	
 	<!-- 전체 멤버 수 조회 -->
 	<select id="getMemberNum" parameterType="String" resultType="int">
 			SELECT COUNT(*) 
 			FROM cafehi_member mem 
 			LEFT OUTER JOIN cafehi_member_auth auth on mem.member_code = 
 			auth.member_code
 			WHERE
 			auth.member_auth = #{mem_auth}
 			
 			<!-- <if test="keyword != null">
 				WHERE qna_title LIKE '%'||#{keyword}||'%'
 			</if> -->
 		
 	</select>
 	
 	<!-- 아이디 찾기 관련  -->
 	
 	 <select id="checkId" parameterType="String" resultType="int">
		SELECT count(*) FROM cafehi_member WHERE member_id = #{member_id}	
 	</select>
 	
 	<select id="checkEmail" parameterType="String" resultType="int">
 		SELECT count(*) FROM cafehi_member WHERE member_email = #{member_email} 
 	</select>
 		
 	<select id="findEmailId" parameterType="Member" resultType="Member">
 		SELECT * FROM cafehi_member WHERE member_email = #{member_email}
 	</select>
 	
 	<!-- 비밀번호 찾기 관련 -->
 	<update id="findPw">
 		UPDATE cafehi_member SET member_pw = #{member_pw} WHERE member_email = #{member_email}
 	</update>
 	
</mapper>